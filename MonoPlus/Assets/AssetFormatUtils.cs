﻿using System;
 using System.Diagnostics.Contracts;
 using System.IO;

namespace MonoPlus.AssetsManagement;

/// <summary>
/// Util methods related to detecting <see cref="AssetFormat"/>
/// </summary>
public static class AssetFormatUtils
{
    /// <summary>
    /// Detects asset format based on <see cref="File"/>'s extension
    /// </summary>
    /// <param name="pathOrExtension"><see cref="File"/> path, or file name (might be only extension, but must include dot)</param>
    /// <returns></returns>
    [Pure] public static AssetFormat DetectFormatByPath(ReadOnlySpan<char> pathOrExtension)
    {
        pathOrExtension = Path.GetExtension(pathOrExtension);
        return pathOrExtension switch
        {
            ".mp3" => AssetFormat.Mp3,
            ".ogg" => AssetFormat.Ogg,
            ".wav" => AssetFormat.Wav,

            ".png" => AssetFormat.Png,
            ".jpg" or ".jpeg" => AssetFormat.Jpeg,

            ".mp4" => AssetFormat.Mp4,

            ".txt" => AssetFormat.Txt,
            ".csv" => AssetFormat.Csv,
            ".json" => AssetFormat.Json,
            ".yaml" => AssetFormat.Yaml,
            ".xml" => AssetFormat.Xml,

            ".bin" or ".bytes" => AssetFormat.Bin,

            ".mgfx" => AssetFormat.Mgfx, //Shader file generated by mgfxc

            ".ftl" => AssetFormat.Ftl,

            _ => AssetFormat.Unknown,
        };
    }

    /// <summary>
    ///   <para>Returns the asset type of the specified asset <paramref name="format"/>.</para>
    /// </summary>
    /// <param name="format">The asset format to get the type of.</param>
    /// <returns>The asset type of the specified asset <paramref name="format"/>.</returns>
    [Pure] public static AssetType ToType(this AssetFormat format)
        => (AssetType)((int)(format + 31) >> 5);

}